// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: redduct/order.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Order struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id              uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Producthash     string `protobuf:"bytes,3,opt,name=producthash,proto3" json:"producthash,omitempty"`
	Seller          string `protobuf:"bytes,4,opt,name=seller,proto3" json:"seller,omitempty"`
	Deliveryaddress string `protobuf:"bytes,5,opt,name=deliveryaddress,proto3" json:"deliveryaddress,omitempty"`
	Quantity        int32  `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Status          int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Paid            int32  `protobuf:"varint,8,opt,name=paid,proto3" json:"paid,omitempty"`
	Totalamount     int32  `protobuf:"varint,9,opt,name=totalamount,proto3" json:"totalamount,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1006ac503bd761, []int{0}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Order) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Order) GetProducthash() string {
	if m != nil {
		return m.Producthash
	}
	return ""
}

func (m *Order) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *Order) GetDeliveryaddress() string {
	if m != nil {
		return m.Deliveryaddress
	}
	return ""
}

func (m *Order) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *Order) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Order) GetPaid() int32 {
	if m != nil {
		return m.Paid
	}
	return 0
}

func (m *Order) GetTotalamount() int32 {
	if m != nil {
		return m.Totalamount
	}
	return 0
}

func init() {
	proto.RegisterType((*Order)(nil), "sap200.redduct.redduct.Order")
}

func init() { proto.RegisterFile("redduct/order.proto", fileDescriptor_6b1006ac503bd761) }

var fileDescriptor_6b1006ac503bd761 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0x5e, 0x6a, 0xdb, 0x6d, 0x11, 0x14, 0xa2, 0x8c, 0xb0, 0x43, 0x28, 0x9e, 0xea, 0xa5, 0x1d,
	0xfa, 0x06, 0xfa, 0x00, 0x42, 0x8f, 0xde, 0xb2, 0x26, 0xb4, 0x81, 0x6e, 0xa9, 0xc9, 0xaf, 0x62,
	0xdf, 0xc2, 0xc7, 0xf2, 0xb8, 0xa3, 0x47, 0x69, 0x1f, 0x44, 0x69, 0xd6, 0x8e, 0xe1, 0x29, 0xdf,
	0xbf, 0x7c, 0xfc, 0xf8, 0xf0, 0x8d, 0x91, 0x42, 0x34, 0x39, 0xa4, 0xda, 0x08, 0x69, 0x92, 0xda,
	0x68, 0xd0, 0x64, 0x65, 0x79, 0xfd, 0xb0, 0xd9, 0x24, 0xa3, 0x37, 0xbd, 0xeb, 0xdb, 0x42, 0x17,
	0xda, 0x45, 0xd2, 0x01, 0x1d, 0xd3, 0x77, 0xbf, 0x08, 0x07, 0x2f, 0xc3, 0x6f, 0x42, 0xf1, 0x3c,
	0x37, 0x92, 0x83, 0x36, 0x14, 0x45, 0x28, 0x5e, 0x66, 0x13, 0x25, 0x57, 0xd8, 0x53, 0x82, 0x7a,
	0x11, 0x8a, 0xfd, 0xcc, 0x53, 0x82, 0x44, 0xf8, 0xb2, 0x36, 0x7a, 0x28, 0x2d, 0xb9, 0x2d, 0xe9,
	0x85, 0x4b, 0x9f, 0x4b, 0x64, 0x85, 0x43, 0x2b, 0xab, 0x4a, 0x1a, 0xea, 0x3b, 0x73, 0x64, 0x24,
	0xc6, 0xd7, 0x42, 0x56, 0xea, 0x5d, 0x9a, 0x96, 0x0b, 0x61, 0xa4, 0xb5, 0x34, 0x70, 0x81, 0xff,
	0x32, 0x59, 0xe3, 0xc5, 0x5b, 0xc3, 0xf7, 0xa0, 0xa0, 0xa5, 0x61, 0x84, 0xe2, 0x20, 0x3b, 0x71,
	0xd7, 0x0e, 0x1c, 0x1a, 0x4b, 0xe7, 0xce, 0x19, 0x19, 0x21, 0xd8, 0xaf, 0xb9, 0x12, 0x74, 0xe1,
	0x54, 0x87, 0x87, 0x5b, 0x41, 0x03, 0xaf, 0xf8, 0x4e, 0x37, 0x7b, 0xa0, 0x4b, 0x67, 0x9d, 0x4b,
	0x4f, 0xcf, 0x5f, 0x1d, 0x43, 0x87, 0x8e, 0xa1, 0x9f, 0x8e, 0xa1, 0xcf, 0x9e, 0xcd, 0x0e, 0x3d,
	0x9b, 0x7d, 0xf7, 0x6c, 0xf6, 0x7a, 0x5f, 0x28, 0x28, 0x9b, 0x6d, 0x92, 0xeb, 0x5d, 0x7a, 0x1c,
	0x35, 0x9d, 0x06, 0xff, 0x38, 0x21, 0x68, 0x6b, 0x69, 0xb7, 0xa1, 0x5b, 0xf3, 0xf1, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0xd8, 0x69, 0xfa, 0xab, 0x92, 0x01, 0x00, 0x00,
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Totalamount != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Totalamount))
		i--
		dAtA[i] = 0x48
	}
	if m.Paid != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Paid))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.Quantity != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Quantity))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Deliveryaddress) > 0 {
		i -= len(m.Deliveryaddress)
		copy(dAtA[i:], m.Deliveryaddress)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Deliveryaddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Producthash) > 0 {
		i -= len(m.Producthash)
		copy(dAtA[i:], m.Producthash)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Producthash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovOrder(uint64(m.Id))
	}
	l = len(m.Producthash)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	l = len(m.Deliveryaddress)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Quantity != 0 {
		n += 1 + sovOrder(uint64(m.Quantity))
	}
	if m.Status != 0 {
		n += 1 + sovOrder(uint64(m.Status))
	}
	if m.Paid != 0 {
		n += 1 + sovOrder(uint64(m.Paid))
	}
	if m.Totalamount != 0 {
		n += 1 + sovOrder(uint64(m.Totalamount))
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Producthash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Producthash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deliveryaddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deliveryaddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			m.Paid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalamount", wireType)
			}
			m.Totalamount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalamount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
